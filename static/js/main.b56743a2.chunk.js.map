{"version":3,"sources":["routes.js","pages/Home.js","pages/GetStarted.js","pages/Docs.js","App.js","serviceWorker.js","index.js"],"names":["routes","path","exact","name","component","className","type","href","Component","App","fallback","role","aria-label","to","map","route","idx","key","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAWeA,G,MANA,CACb,CAAEC,KAAM,IAAKC,OAAO,EAAMC,KAAM,OAAQC,U,iLCDtC,OACE,6BACE,iCACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,SAAf,+FAMJ,iCACE,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,gCACb,yBAAKA,UAAU,uBAAf,kBACA,yBAAKA,UAAU,kBAAf,yIAMF,yBAAKA,UAAU,UACb,uBAAGA,UAAU,uBACb,yBAAKA,UAAU,uBAAf,sBACA,yBAAKA,UAAU,kBAAf,oKAMF,yBAAKA,UAAU,UACb,uBAAGA,UAAU,2BACb,yBAAKA,UAAU,uBAAf,sBACA,yBAAKA,UAAU,kBAAf,+IAUV,iCACE,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,eACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,oBAAf,uBAEF,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cAAf,YACA,yBAAKA,UAAU,WACb,wBAAIC,KAAK,KACP,yCACA,yCACA,gDAQd,iCACE,yBAAKD,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mBAAf,kCAGA,yBAAKA,UAAU,4BACb,uBAAGA,UAAU,iBAAiBE,KAAK,KAAnC,UADF,SAKE,uBAAGF,UAAU,iBAAiBE,KAAK,KAAnC,yB,GAhFIC,cDIlB,CAAEP,KAAM,eAAgBE,KAAM,cAAeC,U,iLEH3C,OACE,iCACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,SAAd,4B,GALeG,cFMvB,CAAEP,KAAM,QAASE,KAAM,OAAQC,U,iLGJ7B,OACE,iCACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,SAAd,4B,GALSG,gB,MC+DJC,MAzDf,WACE,OACE,kBAAC,WAAD,CAAUC,SAJQ,4CAKhB,kBAAC,IAAD,KACE,yBAAKL,UAAU,OACb,6BAASA,UAAU,WACjB,yBAAKA,UAAU,aACb,yBACEA,UAAU,SACVM,KAAK,aACLC,aAAW,mBAEX,yBAAKP,UAAU,gBACb,kBAAC,IAAD,CAAMQ,GAAG,IAAIR,UAAU,eAAvB,gBAIF,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAMA,UAAU,cAAcQ,GAAG,gBAAjC,eAGA,kBAAC,IAAD,CAAMR,UAAU,cAAcQ,GAAG,SAAjC,QAGA,uBAAGR,UAAU,cAAcE,KAAK,8BAC9B,uBAAGF,UAAU,mBAEf,uBAAGA,UAAU,cAAcE,KAAK,8BAC9B,uBAAGF,UAAU,oBAEf,uBAAGA,UAAU,cAAcE,KAAK,8BAC9B,uBAAGF,UAAU,sBAMvB,kBAAC,IAAD,KACGL,EAAOc,KAAI,SAACC,EAAOC,GAClB,OAAOD,EAAMX,UACX,kBAAC,IAAD,CACEa,IAAKD,EACLf,KAAMc,EAAMd,KACZC,MAAOa,EAAMb,MACbC,KAAMY,EAAMZ,KACZe,OAAQ,SAACC,GAAD,OAAW,kBAACJ,EAAMX,UAAce,MAExC,QAEN,kBAAC,IAAD,CAAUN,GAAG,WC7CLO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b56743a2.chunk.js","sourcesContent":["import Home from \"./pages/Home\";\nimport GetStarted from \"./pages/GetStarted\";\nimport Docs from \"./pages/Docs\";\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\nconst routes = [\n  { path: \"/\", exact: true, name: \"Home\", component: Home },\n  { path: \"/get_started\", name: \"Get Started\", component: GetStarted },\n  { path: \"/docs\", name: \"Docs\", component: Docs }\n];\n\nexport default routes;\n","import React, { Component } from \"react\";\nimport \"./Home.scss\";\n\nclass Index extends Component {\n  render() {\n    return (\n      <div>\n        <section>\n          <div className=\"container\">\n            <div className=\"intro\">\n              Extremely light-weight machine learning inference framework built\n              on Mbed and Tensorflow.\n            </div>\n          </div>\n        </section>\n        <section>\n          <div className=\"container\">\n            <div className=\"features\">\n              <div className=\"columns\">\n                <div className=\"column\">\n                  <i className=\"fas fa-tachometer-alt fa-2x\"></i>\n                  <div className=\"feature-title title\">Fast and Small</div>\n                  <div className=\"feature-detail\">\n                    The uTensor core runtime takes full advantage of the Arm\n                    CMSIS-NN kernels, making your models run wicked quick in a\n                    small footprint!\n                  </div>\n                </div>\n                <div className=\"column\">\n                  <i className=\"fas fa-users fa-2x\"></i>\n                  <div className=\"feature-title title\">Developer friendly</div>\n                  <div className=\"feature-detail\">\n                    Hand crafting neural nets for embedded systems is a real\n                    pain in the uTensor, so we provide a toolchain for quickly\n                    generating C++ models so you don't have to!\n                  </div>\n                </div>\n                <div className=\"column\">\n                  <i className=\"fas fa-sliders-h fa-2x\"></i>\n                  <div className=\"feature-title title\">Easy Customization</div>\n                  <div className=\"feature-detail\">\n                    With uTensor it's easy to add new operators, specify where\n                    tensors exist in memory, and even add automatic graph\n                    optimiziation passes!\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n        <section>\n          <div className=\"container\">\n            <div className=\"quick-start\">\n              <h1 className=\"title is-2\">Quick Start</h1>\n              <div className=\"columns\">\n                <div className=\"column is-two-thirds\">\n                  <div className=\"quick-start-code\">This is code part.</div>\n                </div>\n                <div className=\"column\">\n                  <div className=\"title is-3\">Features</div>\n                  <div className=\"content\">\n                    <ul type=\"1\">\n                      <li>Feature 1</li>\n                      <li>Feature 2</li>\n                      <li>Feature 3</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n        <section>\n          <div className=\"container\">\n            <div className=\"community\">\n              <div className=\"community-title\">\n                Join the microTensor Communtiy\n              </div>\n              <div className=\"community-link-container\">\n                <a className=\"community-link\" href=\"/\">\n                  Donate\n                </a>\n                â€¢\n                <a className=\"community-link\" href=\"/\">\n                  Get in Touch\n                </a>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React, { Component } from \"react\";\n\nclass GetStarted extends Component {\n  render() {\n    return (\n      <section>\n        <div className=\"container\">\n          <h1 className=\"title\">Let's get started.</h1>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default GetStarted;\n","import React, { Component } from \"react\";\n\nclass Docs extends Component {\n  render() {\n    return (\n      <section>\n        <div className=\"container\">\n          <h1 className=\"title\">Docs page is here.</h1>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Docs;\n","import React, { Suspense } from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch, Link } from \"react-router-dom\";\n\nimport routes from \"./routes\";\nimport \"./App.scss\";\n\nconst loading = () => <div>Loading...</div>;\n\nfunction App() {\n  return (\n    <Suspense fallback={loading()}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <section className=\"section\">\n            <div className=\"container\">\n              <nav\n                className=\"navbar\"\n                role=\"navigation\"\n                aria-label=\"main navigation\"\n              >\n                <div className=\"navbar-brand\">\n                  <Link to=\"/\" className=\"navbar-item\">\n                    microTensor\n                  </Link>\n                </div>\n                <div className=\"navbar-end\">\n                  <Link className=\"navbar-item\" to=\"/get_started\">\n                    Get Started\n                  </Link>\n                  <Link className=\"navbar-item\" to=\"/docs\">\n                    Docs\n                  </Link>\n                  <a className=\"navbar-item\" href=\"https://github.com/utensor\">\n                    <i className=\"fab fa-github\"></i>\n                  </a>\n                  <a className=\"navbar-item\" href=\"https://github.com/utensor\">\n                    <i className=\"fab fa-twitter\"></i>\n                  </a>\n                  <a className=\"navbar-item\" href=\"https://github.com/utensor\">\n                    <i className=\"fab fa-slack\"></i>\n                  </a>\n                </div>\n              </nav>\n            </div>\n          </section>\n          <Switch>\n            {routes.map((route, idx) => {\n              return route.component ? (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={(props) => <route.component {...props} />}\n                />\n              ) : null;\n            })}\n            <Redirect to=\"/\" />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}